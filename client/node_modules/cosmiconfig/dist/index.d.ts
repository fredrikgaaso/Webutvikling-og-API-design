export * from 'cosmiconfig/dist/types.js';
import { Options, OptionsSync, PublicExplorer, PublicExplorerSync } from 'cosmiconfig/dist/types.js';
export declare const metaSearchPlaces: string[];
export declare const defaultLoaders: Readonly<{
    readonly '.mjs': import("cosmiconfig/dist/types.js").Loader;
    readonly '.cjs': import("cosmiconfig/dist/types.js").Loader;
    readonly '.js': import("cosmiconfig/dist/types.js").Loader;
    readonly '.ts': import("cosmiconfig/dist/types.js").Loader;
    readonly '.json': import("cosmiconfig/dist/types.js").LoaderSync;
    readonly '.yaml': import("cosmiconfig/dist/types.js").LoaderSync;
    readonly '.yml': import("cosmiconfig/dist/types.js").LoaderSync;
    readonly noExt: import("cosmiconfig/dist/types.js").LoaderSync;
}>;
export declare const defaultLoadersSync: Readonly<{
    readonly '.cjs': import("cosmiconfig/dist/types.js").LoaderSync;
    readonly '.js': import("cosmiconfig/dist/types.js").LoaderSync;
    readonly '.ts': import("cosmiconfig/dist/types.js").LoaderSync;
    readonly '.json': import("cosmiconfig/dist/types.js").LoaderSync;
    readonly '.yaml': import("cosmiconfig/dist/types.js").LoaderSync;
    readonly '.yml': import("cosmiconfig/dist/types.js").LoaderSync;
    readonly noExt: import("cosmiconfig/dist/types.js").LoaderSync;
}>;
export declare function cosmiconfig(moduleName: string, options?: Readonly<Options>): PublicExplorer;
export declare function cosmiconfigSync(moduleName: string, options?: Readonly<OptionsSync>): PublicExplorerSync;
//# sourceMappingURL=index.d.ts.map